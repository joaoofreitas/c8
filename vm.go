package main

import (
    "fmt"
)

type Emulator struct {
    memory[MEMORY_SIZE] uint16
    registers[16] uint8
    pc uint16
    display[DISPLAY_WIDTH * DISPLAY_HEIGHT] bool
}

// Constructor for Emulator, fontset loading, initialization of PC, etc...
func NewEmulator() *Emulator {
    e := new(Emulator)

    // Load fontset into memory	
    fontset := [80]uint8 {
	0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
	0x20, 0x60, 0x20, 0x20, 0x70, // 1
	0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
	0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
	0x90, 0x90, 0xF0, 0x10, 0x10, // 4
	0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
	0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
	0xF0, 0x10, 0x20, 0x40, 0x40, // 7
	0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
	0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
	0xF0, 0x90, 0xF0, 0x90, 0x90, // A
	0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
	0xF0, 0x80, 0x80, 0x80, 0xF0, // C
	0xE0, 0x90, 0x90, 0x90, 0xE0, // D
	0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
	0xF0, 0x80, 0xF0, 0x80, 0x80, // F
    }
    
    // Copy fontset into memory address 0x50
    for i := 0; i < 80; i++ {
	e.memory[FONTSET_ADDR + i] = uint16(fontset[i])
    }

    e.pc = START_ADDRESS
    return e
}

// Load ROM into memory
func (e *Emulator) load_rom(rom string) {
    fmt.Println("Loading ROM...")
}

// Run the vm 
func (e *Emulator) run() {
    fmt.Println("Running...")
}
